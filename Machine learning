Creating the model
-----------------------------
import pandas as pd
from sklearn.tree import DecisionTreeRegressor

iowa_file_path = "../input/home-data-for-ml-course/train.csv"

home_data = pd.read_csv(iowa_file_path)
y = home_data.SalePrice
feature_columns =['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath']
X= home_data[feature_columns]

iowa_model = DecisionTreeRegressor()
iowa_model.fit(X,y)

print(f"First in-sample predictions {iowa_model.predict(X.head())}")
print(f"Actual target values for those homes {y.head().tolist}")
--------------------------------------------------------------------

Finding the Mean Absolute Error with validation data
-----------------------------------------------------
from sklearn.model_selection import train_test_split

train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)

melbourn_model = DecisionTree Regressor()

melbourn_model.fit(train_X, train_y)

val_prediction = melbourne_model.predict(val_X)
print(mean_absolute_error(val_y, val_predictions))
------------------------------------------------------------------------

Function to find the best max. Leaf nodes
-----------------------------------------------------------
from sklearn.metrics import mean_absolute_error
from sklearn.tree import DecisionTreeRegressor

def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)
  model = DecisionTreeRegressor(max_leaf_nodes, random_state=0)
  model.fit(train_X, train_y)
  preds_val = model.predict(val_X)
  mae = mean_absolute_error(val_y, preds_val)
  return(mae)
------------------------------------------------------------------

Incosistent Data Entry
-----------------------------------------------
professors['Country'] = professors['Country'].str.lower()
professors['Country'] = professors['Country'].str.strip()

def replace_matches_in_column(df, column, string_to_match, min_ratio = 47)
  #get a list of unique strings
  strings = df[columns].unique()

  #get the top 10 closet matches to our input string
  matches = fuzzywuzzy.process.extract(string_to_match, strings, limit=10, score= fuzzywuzzy.fuzz.token_sort_ratio)

  #only get matches with a ratio > 90
  close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]

  #get the rows of all the close matches in our dataframe 
  rows_with_matches = df[column].isin(close_matches)
  
  #replace all rows with close matches with the input matches
  df.loc[rows_with_matches, column] = string_to_match
----------------------------------------------------------------
  
Three Approaches to clear missing values
---------------------------------------
#Drop columns with missing values
cols_with_missing = [col for col in X_train.columns if X_train[col].isnull().any()]

reduced_X_train = X_train.drop(cols_with_missing, axis = 1)
reduced_X_valid = X_valid.drop(cols_with_missing, axis = 1)

#Imputation with the mean
from sklearn.impute import SimpleImputer

my_imputer = SimpleImputer()
imputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))
imputed_X_valid = pd.DataFrame(my_imputer.transform(X_valid))

imputed_X_train.columns = x_train.columns
imputed_X_valid.columns = x_train.columns
----------------------------------------------------------------------------------


