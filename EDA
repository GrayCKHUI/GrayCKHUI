import pandas as pd
import os

files = [file for file in os.listdir('./Sales_Data')]

all_months_data = pd.DataFrame()

for file in files:
    df = pd.read_csv("./Sales_Data/" + file)
    all_months_data = pd.concat([all_months_data,df])

all_months_data.to_csv("", index=False)

### Read in updated dataframe
all_data = pd.read_csv("")

### Clean up the data!
all_data = all_data.dropna(how = 'all')

### Find "Or" and delete it
all_data = all_data[all_data['Order Data'].str[0:2] != 'Or']

### Convert columns to the correct type
all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

### Task 2: Add Month Column
all_data['Month'] = all_data['Order Data'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')

### Task 3: Add a sales column
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']

### Task 4: Add a city column
###def get_city(address):
###   return address.split(',')[1]
###all_data['City'] = all_data['Purchase Address'].apply(lambda x : get_city(x))

def get_state(address):
    return address.split(',')[2].split(' ')[1]

all_data['City'] = all_data['Purchase Address'].apply(lambda x : x.split(",")[1] + ' ' + get_state(x))

###all_data.drop(columns = 'Column', inplace = True)

### Question 1: What was the best month for sales? How much was earned that month?
results = all_data.groupby('Month').sum()

import matplotlib.pyplot as plt

months = range(1,13)

plt.bar(months, results['Sales'])
plt.xticks(months)
plt.ylabel("")
plt.xlabel("")

### Question 2: What city had the highest number of sales?
results = all_data.groupby('City').sum()

import matplotlib.pyplot as plt

Cities = [city for city, df in all_data.groupby('City')]

plt.bar(Cities, results['Sales'])
plt.xticks(Cities, rotation='vertical',size=8)
plt.ylabel("Sales in USD")
plt.xlabel("City name")

### Question 3: What time should we display adverisements to maximize likelihood of customer's buying product?
all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])
all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Datae'].dt.minute

hours = [hour for hour, df in all_data.groupby('Hour')]

plt.plot(hours,all_data.groupby(['Hour']).count())
plt.xticks(hours)
plt.xlabel('Hour')
plt.ylabel('Number of Orders')
plt.grid()

### Question 4: What products are most often sold together?
df = all_data[all_data['Order ID'].duplicated(keep=False)]

### assess 'Product' after .groupby, transfrom the list from list to dataframe using .transform
df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))

df = df[['Order ID','Grouped']].drop_duplicates()
from itertools import combinations
from collections import Counter

count = Counter()
# a container that will hold the count of each of the elements present in the container

for row in df['Grouped']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list,2)))
# Python Dictionary update() method updates the dictionary with the elements from another dictionary object or from an iterable of key/value pairs.
# Counter(combinations(row_list,2) = most 2 common pairs

count.most_common(10)
# .most_common is used within Counter() object

### Question 5: What product sold the most? Why do you think it sold the most?
product_group = all_data.groupby('Product')
quantity_ordered = product_group.sum()['Quantity Ordered']

products = [product for product, df in product_group]

plt.bar(products, quantity_ordered)
plt.ylabel('Quantity Ordered')
plt.xlabel('Products')
plt.xtick(products, rotation='vetical',size=8)
plt.show()

price = all_data.groupby('Prodcut').mean()['Price Each']
